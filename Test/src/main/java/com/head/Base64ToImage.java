package com.head;

import java.io.*;
import java.util.Base64;
import javax.imageio.ImageIO;

public class Base64ToImage {
    public static void main(String[] args) throws IOException {
//        String base64Str = "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";
//        // 解码Base64字符串
//        {
//            byte[] imageBytes = Base64.getDecoder().decode(base64Str);
//            try {
//                ByteArrayInputStream bis = new ByteArrayInputStream(imageBytes);
//                java.awt.Image image = ImageIO.read(bis);
//                File outputFile = new File("d:/output.jpg");
//                ImageIO.write((java.awt.image.BufferedImage) image, "jpg", outputFile);
//                String base64Str2 = encode(imageBytes);
//                System.out.println(base64Str2);
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        }
//
//        String base64Str3 = encode("d:/output.jpg");
//        {
//            byte[] imageBytes = Base64.getDecoder().decode(base64Str3);
//            try {
//                ByteArrayInputStream bis = new ByteArrayInputStream(imageBytes);
//                java.awt.Image image = ImageIO.read(bis);
//                File outputFile = new File("d:/output2.jpg");
//                ImageIO.write((java.awt.image.BufferedImage) image, "jpg", outputFile);
//                String base64Str2 = encode(imageBytes);
//                System.out.println(base64Str2);
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        }

        ImageUtil.scaleCut("F:\\heads\\fsmview_trainset\\6\\1_neutral\\0.jpg", "d:/output3.jpg", 0, 0, 64, 64);
    }

    public static String encode(byte[] bytes) throws UnsupportedEncodingException {
        String base64Str = "";
        byte[] imageBytes = Base64.getEncoder().encode(bytes);
        base64Str = new String(imageBytes, "utf-8");
        return base64Str;
    }

    public static String encode(String file) throws IOException {
        String base64Str = "";
        java.awt.Image image = ImageIO.read(new FileInputStream(new File(file)));
        ByteArrayOutputStream bis = new ByteArrayOutputStream();
        ImageIO.write((java.awt.image.BufferedImage) image, "jpg", bis);
        byte[] imageBytes = bis.toByteArray();
        base64Str = encode(imageBytes);
        return base64Str;
    }
}